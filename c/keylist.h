// Generated by Molecule 0.7.5

//#define MOLECULEC_VERSION 7005
//#define MOLECULE_API_VERSION_MIN 7000

#include "./deps/ckb-c-stdlib/molecule/molecule_reader.h"
#include "./deps/ckb-c-stdlib/molecule/molecule_builder.h"


#ifndef KEYLIST_H
#define KEYLIST_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_KEYLIST
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "blockchain.h"

/*
 * Reader APIs
 */

#define                                 MolReader_Uint8_verify(s, c)                    mol_verify_fixed_size(s, 1)
#define                                 MolReader_Uint8_get_nth0(s)                     mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Byte10_verify(s, c)                   mol_verify_fixed_size(s, 10)
#define                                 MolReader_Byte10_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Byte10_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Byte10_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Byte10_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Byte10_get_nth4(s)                    mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Byte10_get_nth5(s)                    mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Byte10_get_nth6(s)                    mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Byte10_get_nth7(s)                    mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Byte10_get_nth8(s)                    mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_Byte10_get_nth9(s)                    mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_DeviceKey_verify(s, c)                mol_verify_fixed_size(s, 22)
#define                                 MolReader_DeviceKey_get_main_alg_id(s)          mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_DeviceKey_get_sub_alg_id(s)           mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_DeviceKey_get_cid(s)                  mol_slice_by_offset(s, 2, 10)
#define                                 MolReader_DeviceKey_get_pubkey(s)               mol_slice_by_offset(s, 12, 10)
#define                                 MolReader_DeviceKeyList_verify(s, c)            mol_fixvec_verify(s, 22)
#define                                 MolReader_DeviceKeyList_length(s)               mol_fixvec_length(s)
#define                                 MolReader_DeviceKeyList_get(s, i)               mol_fixvec_slice_by_index(s, 22, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_DeviceKeyListCellData_verify          (const mol_seg_t*, bool);
#define                                 MolReader_DeviceKeyListCellData_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_DeviceKeyListCellData_has_extra_fields(s) mol_table_has_extra_fields(s, 2)
#define                                 MolReader_DeviceKeyListCellData_get_keys(s)     mol_table_slice_by_index(s, 0)
#define                                 MolReader_DeviceKeyListCellData_get_refund_lock(s) mol_table_slice_by_index(s, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_DataEntity_verify                     (const mol_seg_t*, bool);
#define                                 MolReader_DataEntity_actual_field_count(s)      mol_table_actual_field_count(s)
#define                                 MolReader_DataEntity_has_extra_fields(s)        mol_table_has_extra_fields(s, 3)
#define                                 MolReader_DataEntity_get_index(s)               mol_table_slice_by_index(s, 0)
#define                                 MolReader_DataEntity_get_version(s)             mol_table_slice_by_index(s, 1)
#define                                 MolReader_DataEntity_get_entity(s)              mol_table_slice_by_index(s, 2)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Data_verify                           (const mol_seg_t*, bool);
#define                                 MolReader_Data_actual_field_count(s)            mol_table_actual_field_count(s)
#define                                 MolReader_Data_has_extra_fields(s)              mol_table_has_extra_fields(s, 3)
#define                                 MolReader_Data_get_dep(s)                       mol_table_slice_by_index(s, 0)
#define                                 MolReader_Data_get_old(s)                       mol_table_slice_by_index(s, 1)
#define                                 MolReader_Data_get_new(s)                       mol_table_slice_by_index(s, 2)
MOLECULE_API_DECORATOR  mol_errno       MolReader_DataEntityOpt_verify                  (const mol_seg_t*, bool);
#define                                 MolReader_DataEntityOpt_is_none(s)              mol_option_is_none(s)

/*
 * Builder APIs
 */

#define                                 MolBuilder_Uint8_init(b)                        mol_builder_initialize_fixed_size(b, 1)
#define                                 MolBuilder_Uint8_set_nth0(b, p)                 mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint8_build(b)                       mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint8_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Byte10_init(b)                       mol_builder_initialize_fixed_size(b, 10)
#define                                 MolBuilder_Byte10_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Byte10_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Byte10_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Byte10_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Byte10_set_nth4(b, p)                mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Byte10_set_nth5(b, p)                mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Byte10_set_nth6(b, p)                mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Byte10_set_nth7(b, p)                mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Byte10_set_nth8(b, p)                mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_Byte10_set_nth9(b, p)                mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_Byte10_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Byte10_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_DeviceKey_init(b)                    mol_builder_initialize_fixed_size(b, 22)
#define                                 MolBuilder_DeviceKey_set_main_alg_id(b, p)      mol_builder_set_by_offset(b, 0, p, 1)
#define                                 MolBuilder_DeviceKey_set_sub_alg_id(b, p)       mol_builder_set_by_offset(b, 1, p, 1)
#define                                 MolBuilder_DeviceKey_set_cid(b, p)              mol_builder_set_by_offset(b, 2, p, 10)
#define                                 MolBuilder_DeviceKey_set_pubkey(b, p)           mol_builder_set_by_offset(b, 12, p, 10)
#define                                 MolBuilder_DeviceKey_build(b)                   mol_builder_finalize_simple(b)
#define                                 MolBuilder_DeviceKey_clear(b)                   mol_builder_discard(b)
#define                                 MolBuilder_DeviceKeyList_init(b)                mol_fixvec_builder_initialize(b, 512)
#define                                 MolBuilder_DeviceKeyList_push(b, p)             mol_fixvec_builder_push(b, p, 22)
#define                                 MolBuilder_DeviceKeyList_build(b)               mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_DeviceKeyList_clear(b)               mol_builder_discard(b)
#define                                 MolBuilder_DeviceKeyListCellData_init(b)        mol_table_builder_initialize(b, 512, 2)
#define                                 MolBuilder_DeviceKeyListCellData_set_keys(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_DeviceKeyListCellData_set_refund_lock(b, p, l) mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_DeviceKeyListCellData_build          (mol_builder_t);
#define                                 MolBuilder_DeviceKeyListCellData_clear(b)       mol_builder_discard(b)
#define                                 MolBuilder_DataEntity_init(b)                   mol_table_builder_initialize(b, 128, 3)
#define                                 MolBuilder_DataEntity_set_index(b, p, l)        mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_DataEntity_set_version(b, p, l)      mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_DataEntity_set_entity(b, p, l)       mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_DataEntity_build                     (mol_builder_t);
#define                                 MolBuilder_DataEntity_clear(b)                  mol_builder_discard(b)
#define                                 MolBuilder_Data_init(b)                         mol_table_builder_initialize(b, 64, 3)
#define                                 MolBuilder_Data_set_dep(b, p, l)                mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_Data_set_old(b, p, l)                mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_Data_set_new(b, p, l)                mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Data_build                           (mol_builder_t);
#define                                 MolBuilder_Data_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_DataEntityOpt_init(b)                mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_DataEntityOpt_set(b, p, l)           mol_option_builder_set(b, p, l)
#define                                 MolBuilder_DataEntityOpt_build(b)               mol_builder_finalize_simple(b)
#define                                 MolBuilder_DataEntityOpt_clear(b)               mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint8[1]         =  {____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Byte10[10]       =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DeviceKey[22]    =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DeviceKeyList[4] =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DeviceKeyListCellData[69] =  {
    0x45, ____, ____, ____, 0x0c, ____, ____, ____, 0x10, ____, ____, ____,
    ____, ____, ____, ____, 0x35, ____, ____, ____, 0x10, ____, ____, ____,
    0x30, ____, ____, ____, 0x31, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DataEntity[28]   =  {
    0x1c, ____, ____, ____, 0x10, ____, ____, ____, 0x14, ____, ____, ____,
    0x18, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Data[16]         =  {
    0x10, ____, ____, ____, 0x10, ____, ____, ____, 0x10, ____, ____, ____,
    0x10, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_DataEntityOpt[0] =  {};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_DeviceKeyListCellData_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_DeviceKeyList_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Script_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_DataEntity_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Uint32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Uint32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Data_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_DataEntityOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_DataEntityOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_DataEntityOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_DataEntityOpt_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_DataEntity_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_DeviceKeyListCellData_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 53 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 53 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_DeviceKeyList, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 53;
        memcpy(dst, &MolDefault_Script, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_DataEntity_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Uint32, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Uint32, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Data_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_DataEntityOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_DataEntityOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_DataEntityOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_KEYLIST
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_KEYLIST
#endif /* __DEFINE_MOLECULE_API_DECORATOR_KEYLIST */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* KEYLIST_H */
